/**
 * Copyright 2021 Tampere University
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package tuni.lorawan.sensors.api;

import java.util.List;
import java.util.UUID;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import tuni.lorawan.sensors.model.Node;

/**
 * 
 * 
 */
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-07-03T11:34:38.399859+03:00[Europe/Helsinki]")
@Api(value = "nodes")
public interface NodesApi {

	/**
	 * 
	 * @param nodeId
	 * @return response
	 */
	@ApiOperation(value = "Delete node(s)", nickname = "deleteNodes", notes = "Delete existing node(s) and all data produced by the node(s)", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "nodes", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "The node was deleted OK"), @ApiResponse(code = 400, message = "Malformed parameter(s) given"), @ApiResponse(code = 404, message = "Data was not found or permission was denied") })
	@RequestMapping(value = "/nodes", method = RequestMethod.DELETE)
	ResponseEntity<Void> deleteNodes(@ApiParam(value = "Delete node(s) matching the give id(s)") @Valid @RequestParam(value = "node_id", required = false) List<UUID> nodeId);

	/**
	 * 
	 * @param nodeId
	 * @return response
	 */
	@ApiOperation(value = "Return an array of nodes", nickname = "getNodes", notes = "Returns nodes based on the given parameters", response = Node.class, responseContainer = "List", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "nodes", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = Node.class, responseContainer = "List") })
	@RequestMapping(value = "/nodes", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<Node>> getNodes(@ApiParam(value = "Return nodes matching the given node id") @Valid @RequestParam(value = "node_id", required = false) List<UUID> nodeId);

	/**
	 * 
	 * @param body
	 * @return response
	 */
	@ApiOperation(value = "Add a new node", nickname = "postNode", notes = "Add a new node", response = Node.class, authorizations = { @Authorization(value = "BasicAuth") }, tags = { "nodes", })
	@ApiResponses(value = { @ApiResponse(code = 201, message = "On success, returns a node object with the generated ID", response = Node.class), @ApiResponse(code = 400, message = "Invalid Node submitted") })
	@RequestMapping(value = "/nodes", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	ResponseEntity<Node> postNode(@ApiParam(value = "The node to add as an HTTP body", required = true) @Valid @RequestBody Node body);
}
