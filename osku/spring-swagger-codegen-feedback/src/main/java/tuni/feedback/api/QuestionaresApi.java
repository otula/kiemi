/**
 * Copyright 2020 Tampere University
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.22).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package tuni.feedback.api;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import tuni.feedback.model.Answer;
import tuni.feedback.model.Question;
import tuni.feedback.model.Questionare;
import tuni.feedback.model.TimeSelection;
import tuni.feedback.model.QuestionareUser;

/**
 * 
 */
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-11-24T17:52:32.498922+02:00[Europe/Helsinki]")
@Api(value = "questionares")
public interface QuestionaresApi {

	/**
	 * 
	 * @param questionareId
	 * @param answerId
	 * @return response
	 */
	@ApiOperation(value = "Delete answer from the questionare.", nickname = "deleteAnswer", notes = "", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "questionares", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation") })
	@RequestMapping(value = "/questionares/{questionareId}/answers/{answerId}", method = RequestMethod.DELETE)
	ResponseEntity<Void> deleteAnswer(@ApiParam(value = "Delete answer from the questionare, which has the given id.", required = true) @PathVariable("questionareId") Long questionareId, @ApiParam(value = "Delete answer, which has the given id.", required = true) @PathVariable("answerId") Long answerId);

	/**
	 * 
	 * @param questionareId
	 * @param questionId
	 * @return response
	 */
	@ApiOperation(value = "Delete question.", nickname = "deleteQuestion", notes = "", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "questionares", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation") })
	@RequestMapping(value = "/questionares/{questionareId}/questions/{questionId}", method = RequestMethod.DELETE)
	ResponseEntity<Void> deleteQuestion(@ApiParam(value = "Update questionare, which has the given id.", required = true) @PathVariable("questionareId") Long questionareId, @ApiParam(value = "Delete question, which has the given id.", required = true) @PathVariable("questionId") Long questionId);

	/**
	 * 
	 * @param questionareId
	 * @return response
	 */
	@ApiOperation(value = "Delete the questionare.", nickname = "deleteQuestionare", notes = "", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "questionares", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation") })
	@RequestMapping(value = "/questionares/{questionareId}", method = RequestMethod.DELETE)
	ResponseEntity<Void> deleteQuestionare(@ApiParam(value = "Delete questionare, which has the given id.", required = true) @PathVariable("questionareId") Long questionareId);

	/**
	 * 
	 * @param questionareId
	 * @param timeSelectionId
	 * @return response
	 */
	@ApiOperation(value = "Delete time selection.", nickname = "deleteTimeSelection", notes = "", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "questionares", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation") })
	@RequestMapping(value = "/questionares/{questionareId}/timeSelections/{timeSelectionId}", method = RequestMethod.DELETE)
	ResponseEntity<Void> deleteTimeSelection(@ApiParam(value = "Update questionare, which has the given id.", required = true) @PathVariable("questionareId") Long questionareId, @ApiParam(value = "Delete time selection, which has the given id.", required = true) @PathVariable("timeSelectionId") Long timeSelectionId);

	/**
	 * 
	 * @param questionareId
	 * @param from
	 * @param to
	 * @param startTime
	 * @param endTime
	 * @return response
	 */
	@ApiOperation(value = "Return answers for the questionare.", nickname = "getAnswers", notes = "", response = Answer.class, responseContainer = "List", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "questionares", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = Answer.class, responseContainer = "List") })
	@RequestMapping(value = "/questionares/{questionareId}/answers", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<Answer>> getAnswers(@ApiParam(value = "Return answer(s) for the questionare, which has the given id.", required = true) @PathVariable("questionareId") Long questionareId, @ApiParam(value = "Select data submitted after the given value (inclusive), in ISO8601 format.") @Valid @RequestParam(value = "from", required = false) String from,
			@ApiParam(value = "Select data submitted before the given value (inclusive), in ISO8601 format.") @Valid @RequestParam(value = "to", required = false) String to,
			@ApiParam(value = "Select data with report timestamp of given value or greater (inclusive), in UTC time 00:00:00Z.") @Valid @RequestParam(value = "start_time", required = false) String startTime,
			@ApiParam(value = "Select data with report timestamp of given value or lesser (inclusive), in UTC time 00:00:00Z.") @Valid @RequestParam(value = "end_time", required = false) String endTime);

	/**
	 * 
	 * @param questionareId
	 * @return response
	 */
	@ApiOperation(value = "Return the questionare.", nickname = "getQuestionare", notes = "", response = Questionare.class, responseContainer = "List", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "questionares", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = Questionare.class, responseContainer = "List") })
	@RequestMapping(value = "/questionares/{questionareId}", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<Questionare>> getQuestionare(@ApiParam(value = "Return questionare, which has the given id.", required = true) @PathVariable("questionareId") Long questionareId);

	/**
	 * 
	 * @param maxResults
	 * @param startPage
	 * @return response
	 */
	@ApiOperation(value = "Return questionares.", nickname = "getQuestionares", notes = "", response = Questionare.class, responseContainer = "List", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "questionares", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = Questionare.class, responseContainer = "List") })
	@RequestMapping(value = "/questionares", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<Questionare>> getQuestionares(@ApiParam(value = "Return specified maximum number of results (>=1).") @Valid @RequestParam(value = "max_results", required = false) Integer maxResults, @ApiParam(value = "Start listing from the given page (>=0).") @Valid @RequestParam(value = "start_page", required = false) Integer startPage);

	/**
	 * 
	 * @param questionareId
	 * @param maxResults
	 * @param startPage
	 * @return response
	 */
	@ApiOperation(value = "Return questions for the questionare.", nickname = "getQuestions", notes = "", response = Question.class, responseContainer = "List", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "questionares", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = Question.class, responseContainer = "List") })
	@RequestMapping(value = "/questionares/{questionareId}/questions", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<Question>> getQuestions(@ApiParam(value = "Return questions for the questionare, which has the given id.", required = true) @PathVariable("questionareId") Long questionareId, @ApiParam(value = "Return specified maximum number of results (>=1).") @Valid @RequestParam(value = "max_results", required = false) Integer maxResults,
			@ApiParam(value = "Start listing from the given page (>=0).") @Valid @RequestParam(value = "start_page", required = false) Integer startPage);

	/**
	 * 
	 * @param questionareId
	 * @param maxResults
	 * @param startPage
	 * @return response
	 */
	@ApiOperation(value = "Return time selections for the questionare.", nickname = "getTimeSelections", notes = "", response = TimeSelection.class, responseContainer = "List", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "questionares", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = TimeSelection.class, responseContainer = "List") })
	@RequestMapping(value = "/questionares/{questionareId}/timeSelections", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<TimeSelection>> getTimeSelections(@ApiParam(value = "Return time selections for the questionare, which has the given id.", required = true) @PathVariable("questionareId") Long questionareId,
			@ApiParam(value = "Return specified maximum number of results (>=1).") @Valid @RequestParam(value = "max_results", required = false) Integer maxResults, @ApiParam(value = "Start listing from the given page (>=0).") @Valid @RequestParam(value = "start_page", required = false) Integer startPage);

	/**
	 * 
	 * @param questionareId
	 * @param maxResults
	 * @param startPage
	 * @return response
	 */
	@ApiOperation(value = "Return (questionare) users for the questionare.", nickname = "getUsers", notes = "", response = QuestionareUser.class, responseContainer = "List", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "questionares", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = QuestionareUser.class, responseContainer = "List") })
	@RequestMapping(value = "/questionares/{questionareId}/users", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<QuestionareUser>> getUsers(@ApiParam(value = "Return (questionare) user for the questionare, which has the given id.", required = true) @PathVariable("questionareId") Long questionareId, @ApiParam(value = "Return specified maximum number of results (>=1).") @Valid @RequestParam(value = "max_results", required = false) Integer maxResults,
			@ApiParam(value = "Start listing from the given page (>=0).") @Valid @RequestParam(value = "start_page", required = false) Integer startPage);

	/**
	 * 
	 * @param questionareId
	 * @param body
	 * @return response
	 */
	@ApiOperation(value = "Add new answer for the questionare.", nickname = "postAnswer", notes = "", response = Answer.class, responseContainer = "List", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "questionares", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = Answer.class, responseContainer = "List") })
	@RequestMapping(value = "/questionares/{questionareId}/answers", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	ResponseEntity<List<Answer>> postAnswer(@ApiParam(value = "Add new answer for the questionare, which has the given id.", required = true) @PathVariable("questionareId") Long questionareId, @ApiParam(value = "The answer as an HTTP body.", required = true) @Valid @RequestBody Answer body);

	/**
	 * 
	 * @param questionareId
	 * @param body
	 * @return response
	 */
	@ApiOperation(value = "Add a new question for the questionare.", nickname = "postQuestion", notes = "", response = Question.class, responseContainer = "List", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "questionares", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = Question.class, responseContainer = "List") })
	@RequestMapping(value = "/questionares/{questionareId}/questions", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	ResponseEntity<List<Question>> postQuestion(@ApiParam(value = "Add question for the questionare, which has the given id.", required = true) @PathVariable("questionareId") Long questionareId, @ApiParam(value = "The question as an HTTP body.", required = true) @Valid @RequestBody Question body);

	/**
	 * 
	 * @param body
	 * @return response
	 */
	@ApiOperation(value = "Add a new questionare. Only admin users may add new questionares.", nickname = "postQuestionare", notes = "", response = Questionare.class, responseContainer = "List", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "questionares", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = Questionare.class, responseContainer = "List") })
	@RequestMapping(value = "/questionares", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	ResponseEntity<List<Questionare>> postQuestionare(@ApiParam(value = "The questionare as an HTTP body.", required = true) @Valid @RequestBody Questionare body);

	/**
	 * 
	 * @param questionareId
	 * @param body
	 * @return response
	 */
	@ApiOperation(value = "Add new time selection for the questionare.", nickname = "postTimeSelection", notes = "", response = TimeSelection.class, responseContainer = "List", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "questionares", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = TimeSelection.class, responseContainer = "List") })
	@RequestMapping(value = "/questionares/{questionareId}/timeSelections", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	ResponseEntity<List<TimeSelection>> postTimeSelection(@ApiParam(value = "Add time selection for the questionare, which has the given id.", required = true) @PathVariable("questionareId") Long questionareId, @ApiParam(value = "The time selection as an HTTP body.", required = true) @Valid @RequestBody TimeSelection body);

	/**
	 * 
	 * @param questionareId
	 * @param body
	 * @return response
	 */
	@ApiOperation(value = "Add new (questionare) user for the questionare. Note that this will not add a service level user (authentication details), but only a questionare level user (nickname).", nickname = "postUser", notes = "", response = QuestionareUser.class, responseContainer = "List", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "questionares", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = QuestionareUser.class, responseContainer = "List") })
	@RequestMapping(value = "/questionares/{questionareId}/users", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	ResponseEntity<List<QuestionareUser>> postUser(@ApiParam(value = "Update questionare, which has the given id.", required = true) @PathVariable("questionareId") Long questionareId, @ApiParam(value = "The user as an HTTP body.", required = true) @Valid @RequestBody QuestionareUser body);

	/**
	 * 
	 * @param questionareId
	 * @param body
	 * @return response
	 */
	@ApiOperation(value = "Update the questionare.", nickname = "putQuestionare", notes = "", response = Questionare.class, responseContainer = "List", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "questionares", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = Questionare.class, responseContainer = "List") })
	@RequestMapping(value = "/questionares/{questionareId}", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.PUT)
	ResponseEntity<List<Questionare>> putQuestionare(@ApiParam(value = "Update questionare, which has the given id.", required = true) @PathVariable("questionareId") Long questionareId, @ApiParam(value = "The questionare as an HTTP body.", required = true) @Valid @RequestBody Questionare body);

}
