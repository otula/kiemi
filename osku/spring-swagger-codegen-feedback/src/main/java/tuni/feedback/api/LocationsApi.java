/**
 * Copyright 2020 Tampere University
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.22).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package tuni.feedback.api;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import tuni.feedback.model.Area;
import tuni.feedback.model.Location;

/**
 * 
 *
 */
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-11-24T17:52:32.498922+02:00[Europe/Helsinki]")
@Api(value = "locations")
public interface LocationsApi {

	/**
	 * 
	 * @param locationId
	 * @param areaId
	 * @return response
	 */
	@ApiOperation(value = "Delete area from the location. Only admin users may delete areas.", nickname = "deleteArea", notes = "", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "locations", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation") })
	@RequestMapping(value = "/locations/{locationId}/areas/{areaId}", method = RequestMethod.DELETE)
	ResponseEntity<Void> deleteArea(@ApiParam(value = "Delete area from the location, which has the given id.", required = true) @PathVariable("locationId") Long locationId, @ApiParam(value = "Delete area, which has the given id.", required = true) @PathVariable("areaId") Long areaId);

	/**
	 * 
	 * @param locationId
	 * @return response
	 */
	@ApiOperation(value = "Delete location. Only admin users may delete locations.", nickname = "deleteLocation", notes = "", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "locations", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation") })
	@RequestMapping(value = "/locations/{locationId}", method = RequestMethod.DELETE)
	ResponseEntity<Void> deleteLocation(@ApiParam(value = "Delete location, which has the given id.", required = true) @PathVariable("locationId") Long locationId);

	/**
	 * 
	 * @param locationId
	 * @param maxResults
	 * @param startPage
	 * @return response
	 */
	@ApiOperation(value = "Return areas for the lcoation.", nickname = "getAreas", notes = "", response = Area.class, responseContainer = "List", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "locations", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = Area.class, responseContainer = "List") })
	@RequestMapping(value = "/locations/{locationId}/areas", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<Area>> getAreas(@ApiParam(value = "Return area(s) for the location, which has the given id.", required = true) @PathVariable("locationId") Long locationId, @ApiParam(value = "Return specified maximum number of results (>=1).") @Valid @RequestParam(value = "max_results", required = false) Integer maxResults, @ApiParam(value = "Start listing from the given page (>=0).") @Valid @RequestParam(value = "start_page", required = false) Integer startPage);

	/**
	 * 
	 * @param locationId
	 * @return response
	 */
	@ApiOperation(value = "Get location.", nickname = "getLocation", notes = "", response = Location.class, responseContainer = "List", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "locations", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = Location.class, responseContainer = "List") })
	@RequestMapping(value = "/locations/{locationId}", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<Location>> getLocation(@ApiParam(value = "Get location, which has the given id.", required = true) @PathVariable("locationId") Long locationId);

	/**
	 * 
	 * @param maxResults
	 * @param startPage
	 * @return response
	 */
	@ApiOperation(value = "Return locations.", nickname = "getLocations", notes = "", response = Location.class, responseContainer = "List", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "locations", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = Location.class, responseContainer = "List") })
	@RequestMapping(value = "/locations", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<Location>> getLocations(@ApiParam(value = "Return specified maximum number of results (>=1).") @Valid @RequestParam(value = "max_results", required = false) Integer maxResults, @ApiParam(value = "Start listing from the given page (>=0).") @Valid @RequestParam(value = "start_page", required = false) Integer startPage);

	/**
	 * 
	 * @param locationId
	 * @param body
	 * @return response
	 */
	@ApiOperation(value = "Add area for the location. Only admin users may add new areas.", nickname = "postArea", notes = "", response = Area.class, responseContainer = "List", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "locations"})
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = Area.class, responseContainer = "List") })
	@RequestMapping(value = "/locations/{locationId}/areas", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	ResponseEntity<List<Area>> postArea(@ApiParam(value = "Add new area for the location, which has the given id.", required = true) @PathVariable("locationId") Long locationId, @ApiParam(value = "The area as an HTTP body.", required = true) @Valid @RequestBody Area body);

	/**
	 * 
	 * @param body
	 * @return response
	 */
	@ApiOperation(value = "Add new location. Only admin users may add new locations.", nickname = "postLocation", notes = "", response = Location.class, responseContainer = "List", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "locations", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = Location.class, responseContainer = "List") })
	@RequestMapping(value = "/locations", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	ResponseEntity<List<Location>> postLocation(@ApiParam(value = "The location as an HTTP body.", required = true) @Valid @RequestBody Location body);

}
