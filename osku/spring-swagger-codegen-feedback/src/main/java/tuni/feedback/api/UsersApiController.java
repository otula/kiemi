/**
 * Copyright 2021 Tampere University
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.22).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package tuni.feedback.api;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;

import com.fasterxml.jackson.databind.ObjectMapper;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiParam;
import tuni.feedback.model.User;
import tuni.feedback.model.UserToken;
import tuni.feedback.service.UserService;

/**
 * 
 * 
 */
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-04-16T16:17:33.447797968+03:00[Europe/Helsinki]")
@Controller
@Api(tags = { "users" })
public class UsersApiController implements UsersApi {
	@Autowired
	private UserService _userService = null;

	/**
	 * 
	 * @param objectMapper
	 * @param request
	 */
	@org.springframework.beans.factory.annotation.Autowired
	public UsersApiController(ObjectMapper objectMapper, HttpServletRequest request) {
		// nothing needed
	}
	
	@Override
	public ResponseEntity<List<User>> getAuthenticatedUser() {
        return new ResponseEntity<>(Arrays.asList(_userService.getAuthenticatedUser()), HttpStatus.OK);
    }

	@Override
	public ResponseEntity<List<User>> getUser(@ApiParam(value = "Retrieve user, which has the given id.", required = true) @PathVariable("userId") Long userId) {
		return new ResponseEntity<>(Arrays.asList(_userService.getUser(userId)), HttpStatus.OK);
	}

	@Override
	public ResponseEntity<Void> deleteUser(@ApiParam(value = "Delete user, which has the given id.", required = true) @PathVariable("userId") Long userId) {
		_userService.deleteUser(userId);
		return new ResponseEntity<>(HttpStatus.OK);
	}

	@Override
	public ResponseEntity<List<UserToken>> postToken(@NotNull @ApiParam(value = "Give the user (read-only) access to the given questionares.", required = true) @Valid @RequestParam(value = "questionare_id", required = true) List<Long> questionareId) {
		return new ResponseEntity<>(Arrays.asList(_userService.createToken(questionareId)), HttpStatus.OK);
	}

	@Override
	public ResponseEntity<List<User>> postUser(@NotNull @ApiParam(value = "Authentication token to use in creating new user.", required = true) @Valid @RequestParam(value = "token", required = true) String token, @ApiParam(value = "The user as an HTTP body.", required = true) @Valid @RequestBody User body) {
		Long userId = _userService.createUser(token, body);
		if (userId == null) {
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}
		ArrayList<User> a = new ArrayList<>(1);
		User u = new User();
		u.setUsername(body.getUsername());
		u.setId(userId);
		a.add(u);
		return new ResponseEntity<>(a, HttpStatus.OK);
	}
}
