/**
 * Copyright 2020 Tampere University
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package tuni.sites.api;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import tuni.sites.model.Sensor;

/**
 * 
 * 
 */
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-06-18T18:21:36.637143+03:00[Europe/Helsinki]")
@Api(value = "sensors")
public interface SensorsApi {

	/**
	 * 
	 * @param sensorId
	 * @return response
	 */
	@ApiOperation(value = "Delete the requested sensor.", nickname = "deleteSensorById", notes = "", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "sensors", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "Successful operation.") })
	@RequestMapping(value = "/sensors/{sensorId}", method = RequestMethod.DELETE)
	ResponseEntity<Void> deleteSensorById(@ApiParam(value = "Delete the sensor, which has the given id.", required = true) @PathVariable("sensorId") Long sensorId);

	/**
	 * 
	 * @param sensorId
	 * @return response
	 */
	@ApiOperation(value = "Return the requested sensor.", nickname = "getSensorById", notes = "", response = Sensor.class, responseContainer = "List", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "sensors", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "Successful operation.", response = Sensor.class, responseContainer = "List") })
	@RequestMapping(value = "/sensors/{sensorId}", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<Sensor>> getSensorById(@ApiParam(value = "Return sensor, which has the given id.", required = true) @PathVariable("sensorId") Long sensorId);

	/**
	 * 
	 * @param body
	 * @param sensorId
	 * @return response
	 */
	@ApiOperation(value = "Update data for an existing sensor.", nickname = "putSensorById", notes = "", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "sensors", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "Successful operation.") })
	@RequestMapping(value = "/sensors/{sensorId}", consumes = { "application/json" }, method = RequestMethod.PUT)
	ResponseEntity<Void> putSensorById(@ApiParam(value = "The updated sensor data as an HTTP body.", required = true) @Valid @RequestBody Sensor body, @ApiParam(value = "Update sensor, which has the given id.", required = true) @PathVariable("sensorId") Long sensorId);

}
