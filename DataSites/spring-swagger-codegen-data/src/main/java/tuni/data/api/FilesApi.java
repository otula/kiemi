/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.21).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package tuni.data.api;

import java.util.List;

import javax.validation.Valid;

import org.springframework.core.io.Resource;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import tuni.data.model.FileDetail;

/**
 * 
 * 
 */
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-09-03T13:57:44.867474+03:00[Europe/Helsinki]")
@Api(value = "files")
public interface FilesApi {

	/**
	 * 
	 * @param fileId
	 * @return response
	 */
	@ApiOperation(value = "Delete file.", nickname = "deleteFile", notes = "", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "files", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "Successful operation.") })
	@RequestMapping(value = "/files/{fileId}", method = RequestMethod.DELETE)
	ResponseEntity<Void> deleteFile(@ApiParam(value = "Delete file, which has the given id.", required = true) @PathVariable("fileId") Long fileId);

	/**
	 * 
	 * @param fileId
	 * @return response
	 */
	@ApiOperation(value = "Download a file.", nickname = "getFile", notes = "", response = byte[].class, authorizations = { @Authorization(value = "BasicAuth") }, tags = { "files", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "Successful operation.", response = byte[].class) })
	@RequestMapping(value = "/files/{fileId}", produces = { "application/octet-stream" }, method = RequestMethod.GET)
	ResponseEntity<Resource> getFile(@ApiParam(value = "Download file, which has the given id.", required = true) @PathVariable("fileId") Long fileId);

	/**
	 * 
	 * @param maxResults
	 * @param startPage
	 * @return response
	 */
	@ApiOperation(value = "Return list of file details.", nickname = "getFiles", notes = "", response = FileDetail.class, responseContainer = "List", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "files", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = FileDetail.class, responseContainer = "List") })
	@RequestMapping(value = "/files", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<FileDetail>> getFiles(@ApiParam(value = "Return specified maximum number of results (>=1).") @Valid @RequestParam(value = "max_results", required = false) Integer maxResults, @ApiParam(value = "Start listing from the given page (>=0).") @Valid @RequestParam(value = "start_page", required = false) Integer startPage);

	/**
	 * 
	 * @param body
	 * @return response
	 */
	@ApiOperation(value = "Upload a new file.", nickname = "postFile", notes = "", response = FileDetail.class, responseContainer = "List", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "files", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = FileDetail.class, responseContainer = "List") })
	@RequestMapping(value = "/files", produces = { "application/json" }, consumes = { "application/octet-stream" }, method = RequestMethod.POST)
	ResponseEntity<List<FileDetail>> postFile(@ApiParam(value = "The file as an HTTP body.", required = true) @Valid @RequestBody byte[] body);

	/**
	 * 
	 * @param fileId
	 * @param body
	 * @return response
	 */
	@ApiOperation(value = "Replace existing file.", nickname = "putFile", notes = "", authorizations = { @Authorization(value = "BasicAuth") }, tags = { "files", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = FileDetail.class, responseContainer = "List") })
	@RequestMapping(value = "/files/{fileId}", consumes = { "application/octet-stream" }, method = RequestMethod.PUT)
	ResponseEntity<List<FileDetail>> putFile(@ApiParam(value = "Replace file, which has the given id.", required = true) @PathVariable("fileId") Long fileId, @ApiParam(value = "The file as an HTTP body.", required = true) @Valid @RequestBody byte[] body);

}
